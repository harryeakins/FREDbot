/* Auto-generated by genmsg_cpp for file /home/kipman725/ros_workspace/speech_synth/msg/emote_text.msg */
#ifndef SPEECH_SYNTH_MESSAGE_EMOTE_TEXT_H
#define SPEECH_SYNTH_MESSAGE_EMOTE_TEXT_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"


namespace speech_synth
{
template <class ContainerAllocator>
struct emote_text_ {
  typedef emote_text_<ContainerAllocator> Type;

  emote_text_()
  : text()
  , emotion(0.0)
  {
  }

  emote_text_(const ContainerAllocator& _alloc)
  : text(_alloc)
  , emotion(0.0)
  {
  }

  typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _text_type;
  std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  text;

  typedef float _emotion_type;
  float emotion;


private:
  static const char* __s_getDataType_() { return "speech_synth/emote_text"; }
public:
  ROS_DEPRECATED static const std::string __s_getDataType() { return __s_getDataType_(); }

  ROS_DEPRECATED const std::string __getDataType() const { return __s_getDataType_(); }

private:
  static const char* __s_getMD5Sum_() { return "36229d26b0de5f36951d9fe138c81784"; }
public:
  ROS_DEPRECATED static const std::string __s_getMD5Sum() { return __s_getMD5Sum_(); }

  ROS_DEPRECATED const std::string __getMD5Sum() const { return __s_getMD5Sum_(); }

private:
  static const char* __s_getMessageDefinition_() { return "string text\n\
float32 emotion\n\
\n\
\n\
"; }
public:
  ROS_DEPRECATED static const std::string __s_getMessageDefinition() { return __s_getMessageDefinition_(); }

  ROS_DEPRECATED const std::string __getMessageDefinition() const { return __s_getMessageDefinition_(); }

  ROS_DEPRECATED virtual uint8_t *serialize(uint8_t *write_ptr, uint32_t seq) const
  {
    ros::serialization::OStream stream(write_ptr, 1000000000);
    ros::serialization::serialize(stream, text);
    ros::serialization::serialize(stream, emotion);
    return stream.getData();
  }

  ROS_DEPRECATED virtual uint8_t *deserialize(uint8_t *read_ptr)
  {
    ros::serialization::IStream stream(read_ptr, 1000000000);
    ros::serialization::deserialize(stream, text);
    ros::serialization::deserialize(stream, emotion);
    return stream.getData();
  }

  ROS_DEPRECATED virtual uint32_t serializationLength() const
  {
    uint32_t size = 0;
    size += ros::serialization::serializationLength(text);
    size += ros::serialization::serializationLength(emotion);
    return size;
  }

  typedef boost::shared_ptr< ::speech_synth::emote_text_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::speech_synth::emote_text_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct emote_text
typedef  ::speech_synth::emote_text_<std::allocator<void> > emote_text;

typedef boost::shared_ptr< ::speech_synth::emote_text> emote_textPtr;
typedef boost::shared_ptr< ::speech_synth::emote_text const> emote_textConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::speech_synth::emote_text_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::speech_synth::emote_text_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace speech_synth

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::speech_synth::emote_text_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::speech_synth::emote_text_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::speech_synth::emote_text_<ContainerAllocator> > {
  static const char* value() 
  {
    return "36229d26b0de5f36951d9fe138c81784";
  }

  static const char* value(const  ::speech_synth::emote_text_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x36229d26b0de5f36ULL;
  static const uint64_t static_value2 = 0x951d9fe138c81784ULL;
};

template<class ContainerAllocator>
struct DataType< ::speech_synth::emote_text_<ContainerAllocator> > {
  static const char* value() 
  {
    return "speech_synth/emote_text";
  }

  static const char* value(const  ::speech_synth::emote_text_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::speech_synth::emote_text_<ContainerAllocator> > {
  static const char* value() 
  {
    return "string text\n\
float32 emotion\n\
\n\
\n\
";
  }

  static const char* value(const  ::speech_synth::emote_text_<ContainerAllocator> &) { return value(); } 
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::speech_synth::emote_text_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.text);
    stream.next(m.emotion);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct emote_text_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::speech_synth::emote_text_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::speech_synth::emote_text_<ContainerAllocator> & v) 
  {
    s << indent << "text: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.text);
    s << indent << "emotion: ";
    Printer<float>::stream(s, indent + "  ", v.emotion);
  }
};


} // namespace message_operations
} // namespace ros

#endif // SPEECH_SYNTH_MESSAGE_EMOTE_TEXT_H

