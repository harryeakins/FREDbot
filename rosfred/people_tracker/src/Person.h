/* Auto-generated by genmsg_cpp for file /home/robert/ros_workspace/pi_tracker/msg/Skeleton.msg */
#ifndef PI_TRACKER_MESSAGE_SKELETON_H
#define PI_TRACKER_MESSAGE_SKELETON_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"

#include "std_msgs/Header.h"
#include "geometry_msgs/Vector3.h"
#include "geometry_msgs/Quaternion.h"

namespace people_tracker
{
template <class ContainerAllocator>
struct Person_ {
  typedef Person_<ContainerAllocator> Type;

  Person_()
  : header()
  , user_id(0)
  , name()
  , confidence()
  , position()
  , orientation()
  {
  }

  Person_(const ContainerAllocator& _alloc)
  : header(_alloc)
  , user_id(0)
  , name(_alloc)
  , confidence(_alloc)
  , position(_alloc)
  , orientation(_alloc)
  {
  }

  typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
   ::std_msgs::Header_<ContainerAllocator>  header;

  typedef int32_t _user_id_type;
  int32_t user_id;

  typedef std::vector<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > , typename ContainerAllocator::template rebind<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::other >  _name_type;
  std::vector<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > , typename ContainerAllocator::template rebind<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::other >  name;

  typedef std::vector<float, typename ContainerAllocator::template rebind<float>::other >  _confidence_type;
  std::vector<float, typename ContainerAllocator::template rebind<float>::other >  confidence;

  typedef std::vector< ::geometry_msgs::Vector3_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::geometry_msgs::Vector3_<ContainerAllocator> >::other >  _position_type;
  std::vector< ::geometry_msgs::Vector3_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::geometry_msgs::Vector3_<ContainerAllocator> >::other >  position;

  typedef std::vector< ::geometry_msgs::Quaternion_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::geometry_msgs::Quaternion_<ContainerAllocator> >::other >  _orientation_type;
  std::vector< ::geometry_msgs::Quaternion_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::geometry_msgs::Quaternion_<ContainerAllocator> >::other >  orientation;


  ROS_DEPRECATED uint32_t get_name_size() const { return (uint32_t)name.size(); }
  ROS_DEPRECATED void set_name_size(uint32_t size) { name.resize((size_t)size); }
  ROS_DEPRECATED void get_name_vec(std::vector<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > , typename ContainerAllocator::template rebind<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::other > & vec) const { vec = this->name; }
  ROS_DEPRECATED void set_name_vec(const std::vector<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > , typename ContainerAllocator::template rebind<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::other > & vec) { this->name = vec; }
  ROS_DEPRECATED uint32_t get_confidence_size() const { return (uint32_t)confidence.size(); }
  ROS_DEPRECATED void set_confidence_size(uint32_t size) { confidence.resize((size_t)size); }
  ROS_DEPRECATED void get_confidence_vec(std::vector<float, typename ContainerAllocator::template rebind<float>::other > & vec) const { vec = this->confidence; }
  ROS_DEPRECATED void set_confidence_vec(const std::vector<float, typename ContainerAllocator::template rebind<float>::other > & vec) { this->confidence = vec; }
  ROS_DEPRECATED uint32_t get_position_size() const { return (uint32_t)position.size(); }
  ROS_DEPRECATED void set_position_size(uint32_t size) { position.resize((size_t)size); }
  ROS_DEPRECATED void get_position_vec(std::vector< ::geometry_msgs::Vector3_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::geometry_msgs::Vector3_<ContainerAllocator> >::other > & vec) const { vec = this->position; }
  ROS_DEPRECATED void set_position_vec(const std::vector< ::geometry_msgs::Vector3_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::geometry_msgs::Vector3_<ContainerAllocator> >::other > & vec) { this->position = vec; }
  ROS_DEPRECATED uint32_t get_orientation_size() const { return (uint32_t)orientation.size(); }
  ROS_DEPRECATED void set_orientation_size(uint32_t size) { orientation.resize((size_t)size); }
  ROS_DEPRECATED void get_orientation_vec(std::vector< ::geometry_msgs::Quaternion_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::geometry_msgs::Quaternion_<ContainerAllocator> >::other > & vec) const { vec = this->orientation; }
  ROS_DEPRECATED void set_orientation_vec(const std::vector< ::geometry_msgs::Quaternion_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::geometry_msgs::Quaternion_<ContainerAllocator> >::other > & vec) { this->orientation = vec; }
private:
  static const char* __s_getDataType_() { return "people_tracker/Person"; }
public:
  ROS_DEPRECATED static const std::string __s_getDataType() { return __s_getDataType_(); }

  ROS_DEPRECATED const std::string __getDataType() const { return __s_getDataType_(); }

private:
  static const char* __s_getMD5Sum_() { return "34722af981b6a61700ff31df5a97c2e0"; }
public:
  ROS_DEPRECATED static const std::string __s_getMD5Sum() { return __s_getMD5Sum_(); }

  ROS_DEPRECATED const std::string __getMD5Sum() const { return __s_getMD5Sum_(); }

private:
  static const char* __s_getMessageDefinition_() { return "Header header\n\
int32 user_id\n\
string[] name\n\
float32[] confidence\n\
geometry_msgs/Vector3[] position\n\
geometry_msgs/Quaternion[] orientation\n\
\n\
================================================================================\n\
MSG: std_msgs/Header\n\
# Standard metadata for higher-level stamped data types.\n\
# This is generally used to communicate timestamped data \n\
# in a particular coordinate frame.\n\
# \n\
# sequence ID: consecutively increasing ID \n\
uint32 seq\n\
#Two-integer timestamp that is expressed as:\n\
# * stamp.secs: seconds (stamp_secs) since epoch\n\
# * stamp.nsecs: nanoseconds since stamp_secs\n\
# time-handling sugar is provided by the client library\n\
time stamp\n\
#Frame this data is associated with\n\
# 0: no frame\n\
# 1: global frame\n\
string frame_id\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Vector3\n\
# This represents a vector in free space. \n\
\n\
float64 x\n\
float64 y\n\
float64 z\n\
================================================================================\n\
MSG: geometry_msgs/Quaternion\n\
# This represents an orientation in free space in quaternion form.\n\
\n\
float64 x\n\
float64 y\n\
float64 z\n\
float64 w\n\
\n\
"; }
public:
  ROS_DEPRECATED static const std::string __s_getMessageDefinition() { return __s_getMessageDefinition_(); }

  ROS_DEPRECATED const std::string __getMessageDefinition() const { return __s_getMessageDefinition_(); }

  ROS_DEPRECATED virtual uint8_t *serialize(uint8_t *write_ptr, uint32_t seq) const
  {
    ros::serialization::OStream stream(write_ptr, 1000000000);
    ros::serialization::serialize(stream, header);
    ros::serialization::serialize(stream, user_id);
    ros::serialization::serialize(stream, name);
    ros::serialization::serialize(stream, confidence);
    ros::serialization::serialize(stream, position);
    ros::serialization::serialize(stream, orientation);
    return stream.getData();
  }

  ROS_DEPRECATED virtual uint8_t *deserialize(uint8_t *read_ptr)
  {
    ros::serialization::IStream stream(read_ptr, 1000000000);
    ros::serialization::deserialize(stream, header);
    ros::serialization::deserialize(stream, user_id);
    ros::serialization::deserialize(stream, name);
    ros::serialization::deserialize(stream, confidence);
    ros::serialization::deserialize(stream, position);
    ros::serialization::deserialize(stream, orientation);
    return stream.getData();
  }

  ROS_DEPRECATED virtual uint32_t serializationLength() const
  {
    uint32_t size = 0;
    size += ros::serialization::serializationLength(header);
    size += ros::serialization::serializationLength(user_id);
    size += ros::serialization::serializationLength(name);
    size += ros::serialization::serializationLength(confidence);
    size += ros::serialization::serializationLength(position);
    size += ros::serialization::serializationLength(orientation);
    return size;
  }

  typedef boost::shared_ptr< ::people_tracker::Person_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::people_tracker::Person_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct Person
typedef  ::people_tracker::Person_<std::allocator<void> > Person;

typedef boost::shared_ptr< ::people_tracker::Person> PersonPtr;
typedef boost::shared_ptr< ::people_tracker::Person const> PersonConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::people_tracker::Person_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::people_tracker::Person_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace pi_tracker

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::people_tracker::Person_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::people_tracker::Person_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::people_tracker::Person_<ContainerAllocator> > {
  static const char* value() 
  {
    return "34722af981b6a61700ff31df5a97c2e0";
  }

  static const char* value(const  ::people_tracker::Person_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x34722af981b6a617ULL;
  static const uint64_t static_value2 = 0x00ff31df5a97c2e0ULL;
};

template<class ContainerAllocator>
struct DataType< ::people_tracker::Person_<ContainerAllocator> > {
  static const char* value() 
  {
    return "people_tracker/Person";
  }

  static const char* value(const  ::people_tracker::Person_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::people_tracker::Person_<ContainerAllocator> > {
  static const char* value() 
  {
    return "Header header\n\
int32 user_id\n\
string[] name\n\
float32[] confidence\n\
geometry_msgs/Vector3[] position\n\
geometry_msgs/Quaternion[] orientation\n\
\n\
================================================================================\n\
MSG: std_msgs/Header\n\
# Standard metadata for higher-level stamped data types.\n\
# This is generally used to communicate timestamped data \n\
# in a particular coordinate frame.\n\
# \n\
# sequence ID: consecutively increasing ID \n\
uint32 seq\n\
#Two-integer timestamp that is expressed as:\n\
# * stamp.secs: seconds (stamp_secs) since epoch\n\
# * stamp.nsecs: nanoseconds since stamp_secs\n\
# time-handling sugar is provided by the client library\n\
time stamp\n\
#Frame this data is associated with\n\
# 0: no frame\n\
# 1: global frame\n\
string frame_id\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Vector3\n\
# This represents a vector in free space. \n\
\n\
float64 x\n\
float64 y\n\
float64 z\n\
================================================================================\n\
MSG: geometry_msgs/Quaternion\n\
# This represents an orientation in free space in quaternion form.\n\
\n\
float64 x\n\
float64 y\n\
float64 z\n\
float64 w\n\
\n\
";
  }

  static const char* value(const  ::people_tracker::Person_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct HasHeader< ::people_tracker::Person_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct HasHeader< const ::people_tracker::Person_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::people_tracker::Person_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.header);
    stream.next(m.user_id);
    stream.next(m.name);
    stream.next(m.confidence);
    stream.next(m.position);
    stream.next(m.orientation);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct Person_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::people_tracker::Person_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::people_tracker::Person_<ContainerAllocator> & v) 
  {
    s << indent << "header: ";
s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "user_id: ";
    Printer<int32_t>::stream(s, indent + "  ", v.user_id);
    s << indent << "name[]" << std::endl;
    for (size_t i = 0; i < v.name.size(); ++i)
    {
      s << indent << "  name[" << i << "]: ";
      Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.name[i]);
    }
    s << indent << "confidence[]" << std::endl;
    for (size_t i = 0; i < v.confidence.size(); ++i)
    {
      s << indent << "  confidence[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.confidence[i]);
    }
    s << indent << "position[]" << std::endl;
    for (size_t i = 0; i < v.position.size(); ++i)
    {
      s << indent << "  position[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::geometry_msgs::Vector3_<ContainerAllocator> >::stream(s, indent + "    ", v.position[i]);
    }
    s << indent << "orientation[]" << std::endl;
    for (size_t i = 0; i < v.orientation.size(); ++i)
    {
      s << indent << "  orientation[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::geometry_msgs::Quaternion_<ContainerAllocator> >::stream(s, indent + "    ", v.orientation[i]);
    }
  }
};


} // namespace message_operations
} // namespace ros

#endif // PI_TRACKER_MESSAGE_SKELETON_H

